name: Process Club Data

permissions:
  contents: write

on:
  push:
    branches:
      - master
      - ci-pipeline-scaffold
    paths:
      - 'data/competitors_*.csv'
      - 'data/ClubEvents_*.xlsx'
  workflow_dispatch:

jobs:
  build-test-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Fetch full Git history
        run: git fetch --unshallow

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install pandas openpyxl

      - name: Restore dependencies
        run: dotnet restore processor/ClubProcessor.sln

      - name: Build solution
        run: dotnet build processor/ClubProcessor.sln --configuration Release

      - name: Run tests
        run: dotnet test processor/ClubProcessor.Tests/ClubProcessor.Tests.csproj --verbosity minimal
          
      - name: Detect changed files and extract/process
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          for FILE in $CHANGED; do
            if [[ "$FILE" == data/ClubEvents_*.xlsx ]]; then
              echo "[INFO] Detected ClubEvents XLSX: $FILE"
              echo "$FILE" > .club_events_xlsx_path
              python3 scripts/extract_club_events.py "$FILE" data/extracted/
            elif [[ "$FILE" == data/competitors_*.csv ]]; then
              echo "[INFO] Detected competitors CSV: $FILE"
              echo "$FILE" > .competitor_csv_path
              dotnet run --project processor/ClubProcessor/ClubProcessor.csproj -- --mode competitors --file "$FILE"
            fi
          done

      - name: Run processor if extracted event CSVs exist
        run: |
          for year_dir in data/extracted/*; do
            if [[ -f "$year_dir/calendar_*.csv" ]] && [[ -d "$year_dir/events" ]] && compgen -G "$year_dir/events/Event_*.csv" > /dev/null; then
              echo "[INFO] Detected full extracted dataset in: $year_dir"
              dotnet run --project processor/ClubProcessor/ClubProcessor.csproj -- --mode events --file "$year_dir"
            fi
          done
          
      - name: Summarise competitor metrics
        run: |
          if [ -f ".competitor_csv_path" ]; then
            file=$(cat .competitor_csv_path)
            year=$(basename "$file" | grep -oP '\d{4}')
            dbPath="data/club_competitors_${year}.db"
      
            if [ -f "$dbPath" ]; then
              echo "[INFO] Summarising metrics for $dbPath"
              python3 scripts/summarise_competitor_metrics.py --db "$dbPath"
            else
              echo "[WARN] DB not found: $dbPath — skipping metrics summary"
            fi
          else
            echo "[INFO] No competitor CSV processed — skipping metrics summary"
          fi

      - name: Prepare commit inputs for Competitor SQLite DB
        run: |
          if [ -f ".competitor_csv_path" ]; then
            file=$(cat .competitor_csv_path)
            year=$(basename "$file" | grep -oP '\d{4}')
            echo "dbPath=data/club_competitors_${year}.db" >> $GITHUB_ENV
            echo "commitMessage=Persisted competitor DB for ${year} import [ci skip]" >> $GITHUB_ENV
          else
            echo "[Info] No competitor CSV processed — skipping DB commit"
            echo "skipCommit=true" >> $GITHUB_ENV
          fi
        shell: bash
      
      - name: Commit Competitor DB if needed
        if: ${{ env.skipCommit != 'true' }}
        uses: ./.github/actions/commit-db
        with:
          db-path: ${{ env.dbPath }}
          commit-message: ${{ env.commitMessage }}
      
      - name: Prepare commit inputs for ClubEvents SQLite DB
        run: |
          if [ -f ".club_events_xlsx_path" ]; then
            file=$(cat .club_events_xlsx_path)
            year=$(basename "$file" | grep -oP '\d{4}')
            echo "dbPath=data/club_events_${year}.db" >> $GITHUB_ENV
            echo "commitMessage=Persisted ClubEvents DB for ${year} import [ci skip]" >> $GITHUB_ENV
          else
            echo "[Info] No ClubEvents XLSX processed — skipping DB commit"
            echo "skipCommit=true" >> $GITHUB_ENV
          fi
        shell: bash
      
      - name: Commit ClubEvents DB if needed
        if: ${{ env.skipCommit != 'true' }}
        uses: ./.github/actions/commit-db
        with:
          db-path: ${{ env.dbPath }}
          commit-message: ${{ env.commitMessage }}

     
      