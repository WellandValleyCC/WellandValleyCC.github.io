// <auto-generated />
using System;
using ClubProcessor.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClubProcessor.Migrations.EventDb
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20251029120928_CalendarEventModelConsolidation_AddPrimaryKeyAndIndex")]
    partial class CalendarEventModelConsolidation_AddPrimaryKeyAndIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("ClubProcessor.Models.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("EventNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsClubChampionship")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEvening10")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHardRideSeries")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHillClimb")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNonStandard10")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Miles")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventNumber")
                        .IsUnique();

                    b.ToTable("CalendarEvents", (string)null);
                });

            modelBuilder.Entity("ClubProcessor.Models.PointsAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PointsAllocations");
                });

            modelBuilder.Entity("ClubProcessor.Models.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AvgSpeed")
                        .HasColumnType("REAL");

                    b.Property<int?>("ClubNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Eligibility")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EventNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventRoadBikePosition")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRoadBike")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JuniorsPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JuniorsPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JuvenilesPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JuvenilesPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League1Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League1Position")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League2Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League2Position")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League3Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League3Position")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League4Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("League4Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NevBrooksPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NevBrooksPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NevBrooksSecondsAdjustedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NevBrooksSecondsApplied")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NevBrooksSecondsGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PremPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PremPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoadBikeMenPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoadBikeMenPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoadBikeWomenPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoadBikeWomenPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeniorsPoints")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalSeconds")
                        .HasColumnType("REAL");

                    b.Property<int?>("VeteransPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VeteransPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WomenPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WomenPosition")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
